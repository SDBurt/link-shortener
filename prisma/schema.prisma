// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "sessions")
}

model User {
    id                     String    @id @default(cuid())
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    createdAt              DateTime  @default(now()) @map(name: "created_at")
    updatedAt              DateTime  @default(now()) @map(name: "updated_at")
    accounts               Account[]
    sessions               Session[]
    links                  Link[]
    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
    project                Project[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Project {
    id       String  @id @default(cuid())
    name     String
    slug     String  @unique
    verified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    links     Link[]

    // usage
    usage              Int     @default(0)
    ownerUsageLimit    Int     @default(1000)
    ownerExceededUsage Boolean @default(false)

    // Creator
    userId String
    user   User   @relation(fields: [userId], references: [id])

    theme Theme?
}

model Link {
    id String @id @default(cuid())

    slug String
    key  String
    url  String @db.LongText

    title       String
    description String? @db.VarChar(280)

    clicks      Int     @default(0)
    public      Boolean @default(false)
    publicStats Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    // Creator
    userId String
    user   User   @relation(fields: [userId], references: [id])

    // project
    project Project? @relation(fields: [slug], references: [slug], onUpdate: Cascade, onDelete: Cascade)

    @@unique([slug, key])
    @@index([userId])
}

model Theme {
    id String @id @default(cuid())

    project     Project      @relation(fields: [projectSlug], references: [slug])
    projectSlug String       @unique
    background  Background?
    buttonStyle ButtonStyle?

    key       String
    luminance String

    // social icon settings
    socialStyleColor String

    // typeface settings
    typefaceColor  String
    typefaceFamily String

}

model Background {
    id    String @id @default(cuid())
    color String
    style String
    type  String

    // parent theme
    theme   Theme  @relation(fields: [themeId], references: [id])
    themeId String @unique
}

model ButtonStyle {
    id              String @id @default(cuid())
    backgroundColor String
    shadowColor     String
    textColor       String
    type            String

    // parent theme
    theme   Theme  @relation(fields: [themeId], references: [id])
    themeId String @unique
}
